plugins {
    id "com.github.johnrengelman.shadow" version "5.0.0"
}

configurations {
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
}

architectury {
    platformSetupLoomIde()
    fabric()
}

repositories {
    maven { url "https://www.cursemaven.com/"}
    maven { url "https://maven.shedaniel.me/" }
    maven {url "https://maven.terraformersmc.com/releases/"}
    maven { url "https://maven.bai.lol" }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "me.shedaniel:architectury-fabric:${rootProject.architectury_version}"

    modApi "me.shedaniel.cloth:cloth-config-fabric:${rootProject.cloth_version}"
    modApi "com.terraformersmc:modmenu:${rootProject.modmenu_version}"

    modCompileOnly "mcp.mobius.waila:wthit-api:fabric-${rootProject.wthit_version}"
    modRuntime "mcp.mobius.waila:wthit:fabric-${rootProject.wthit_version}"

    modApi 'teamreborn:energy:0.1.1'
    modImplementation 'teamreborn:energy:0.1.1'

    modCompileOnly "me.shedaniel:RoughlyEnoughItems-api:${rootProject.rei_version}"
    modRuntime "me.shedaniel:RoughlyEnoughItems:${rootProject.rei_version}"

    implementation(project(path: ":common")) {
        transitive = false
    }
    developmentFabric(project(path: ":common")) {
        transitive = false
    }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) {
        transitive = false
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier "fabric"
}

jar {
    classifier "dev"
}

java {
    withSourcesJar()
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}