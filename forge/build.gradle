    plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}
loom {
    forge {
        mixinConfig "multiblockmachine-common.mixins.json"
        mixinConfig "multiblockmachine.mixins.json"
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

repositories {
    maven { url 'https://modmaven.dev/' }
    maven { url "https://dvs1.progwml6.com/files/maven/"}
    maven { url "https://www.cursemaven.com"}
    maven { url "https://maven.k-4u.nl/"}
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

    modApi("me.shedaniel.cloth:cloth-config-forge:${rootProject.cloth_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    //modRuntimeOnly "mekanism:Mekanism:${rootProject.mekanism_version}"
    //modRuntimeOnly "mekanism:Mekanism:${rootProject.mekanism_version}:additions"
    //modRuntimeOnly "mekanism:Mekanism:${rootProject.mekanism_version}:generators"
    //modRuntimeOnly "mekanism:Mekanism:${rootProject.mekanism_version}:tools"

    modRuntimeOnly "curse.maven:pipez-443900:3736957"
    modRuntimeOnly "curse.maven:jade-324717:3681449"
    modRuntimeOnly "curse.maven:top-245211:3671753"


    modApi "mezz.jei:jei-${rootProject.minecraft_version}:${rootProject.jei_version}:api"
    modRuntimeOnly "mezz.jei:jei-${rootProject.minecraft_version}:${rootProject.jei_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}


processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}
