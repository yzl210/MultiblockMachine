plugins {
    id "com.github.johnrengelman.shadow" version "5.0.0"
}

configurations {
    shadowCommon
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    useFabricMixin = true
}

repositories {
    maven { url 'https://modmaven.dev/' }
    maven { url "https://dvs1.progwml6.com/files/maven/"}
    maven { url "https://www.cursemaven.com"}
    maven { url "https://maven.tterrag.com/"}
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "me.shedaniel:architectury-forge:${rootProject.architectury_version}"

    modApi("me.shedaniel.cloth:cloth-config-forge:${rootProject.cloth_version}")


    modRuntime "mekanism:Mekanism:${rootProject.mekanism_version}"
    modRuntime "mekanism:Mekanism:${rootProject.mekanism_version}:additions"
    modRuntime "mekanism:Mekanism:${rootProject.mekanism_version}:generators"
    modRuntime "mekanism:Mekanism:${rootProject.mekanism_version}:tools"

    modRuntime "curse.maven:jade-324717:3439522"
    modRuntime "mcjty.theoneprobe:TheOneProbe-1.16:1.16-3.1.4-22"


    modApi "mezz.jei:jei-${rootProject.minecraft_version}:${rootProject.jei_version}:api"
    modRuntime "mezz.jei:jei-${rootProject.minecraft_version}:${rootProject.jei_version}"

    implementation(project(path: ":common")) {
        transitive = false
    }
    developmentForge(project(path: ":common")) {
        transitive = false
    }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) {
        transitive = false
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier "forge"
}

jar {
    classifier "dev"
}

java {
    withSourcesJar()
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}
